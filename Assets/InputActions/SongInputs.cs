//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputActions/SongInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SongInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SongInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SongInputs"",
    ""maps"": [
        {
            ""name"": ""Notes"",
            ""id"": ""17ca96f9-f4f4-401c-a4e9-0ecb94f4fd6d"",
            ""actions"": [
                {
                    ""name"": ""HitLine1"",
                    ""type"": ""Button"",
                    ""id"": ""fec26d89-11ae-4114-9f93-48b1f90d7927"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HitLine2"",
                    ""type"": ""Button"",
                    ""id"": ""83bdc74f-2fcd-4c66-9c33-6652664a22bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HitLine3"",
                    ""type"": ""Button"",
                    ""id"": ""55866290-077f-4e66-bfab-0c32befbf181"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e31f0e69-e520-4fb3-9c88-15ac9803d582"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HitLine1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28f63c62-83e5-4909-ab9e-7eed0f249c24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HitLine2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44b1859c-06bb-4b1a-9d58-5a39ba411a39"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HitLine3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Notes
        m_Notes = asset.FindActionMap("Notes", throwIfNotFound: true);
        m_Notes_HitLine1 = m_Notes.FindAction("HitLine1", throwIfNotFound: true);
        m_Notes_HitLine2 = m_Notes.FindAction("HitLine2", throwIfNotFound: true);
        m_Notes_HitLine3 = m_Notes.FindAction("HitLine3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Notes
    private readonly InputActionMap m_Notes;
    private INotesActions m_NotesActionsCallbackInterface;
    private readonly InputAction m_Notes_HitLine1;
    private readonly InputAction m_Notes_HitLine2;
    private readonly InputAction m_Notes_HitLine3;
    public struct NotesActions
    {
        private @SongInputs m_Wrapper;
        public NotesActions(@SongInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @HitLine1 => m_Wrapper.m_Notes_HitLine1;
        public InputAction @HitLine2 => m_Wrapper.m_Notes_HitLine2;
        public InputAction @HitLine3 => m_Wrapper.m_Notes_HitLine3;
        public InputActionMap Get() { return m_Wrapper.m_Notes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotesActions set) { return set.Get(); }
        public void SetCallbacks(INotesActions instance)
        {
            if (m_Wrapper.m_NotesActionsCallbackInterface != null)
            {
                @HitLine1.started -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine1;
                @HitLine1.performed -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine1;
                @HitLine1.canceled -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine1;
                @HitLine2.started -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine2;
                @HitLine2.performed -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine2;
                @HitLine2.canceled -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine2;
                @HitLine3.started -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine3;
                @HitLine3.performed -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine3;
                @HitLine3.canceled -= m_Wrapper.m_NotesActionsCallbackInterface.OnHitLine3;
            }
            m_Wrapper.m_NotesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HitLine1.started += instance.OnHitLine1;
                @HitLine1.performed += instance.OnHitLine1;
                @HitLine1.canceled += instance.OnHitLine1;
                @HitLine2.started += instance.OnHitLine2;
                @HitLine2.performed += instance.OnHitLine2;
                @HitLine2.canceled += instance.OnHitLine2;
                @HitLine3.started += instance.OnHitLine3;
                @HitLine3.performed += instance.OnHitLine3;
                @HitLine3.canceled += instance.OnHitLine3;
            }
        }
    }
    public NotesActions @Notes => new NotesActions(this);
    public interface INotesActions
    {
        void OnHitLine1(InputAction.CallbackContext context);
        void OnHitLine2(InputAction.CallbackContext context);
        void OnHitLine3(InputAction.CallbackContext context);
    }
}
